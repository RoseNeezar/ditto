// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    boards        Board[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id     String @id @default(cuid())
    title  String @unique @map(name: "board_title_idx") @db.VarChar(255)
    userId String @map(name: "board_user_id_fk") @db.VarChar(255)
    user   User   @relation(fields: [userId], references: [id])
    lists  List[]
}

model List {
    id      String @id @default(cuid())
    title   String @unique @map(name: "list_title_idx") @db.VarChar(255)
    tasks   Task[]
    board   Board  @relation(fields: [boardId], references: [id])
    boardId String @map(name: "list_board_id_fk")
}

model Task {
    id           String  @id @default(cuid())
    title        String  @unique @map(name: "task_title_idx") @db.VarChar(255)
    descriptions String?
    list         List    @relation(fields: [listId], references: [id])
    listId       String  @map(name: "task_list_id_fk")
}

// Example denormalization by combining related tables into a single table
model BoardListTask {
    id           String  @id @default(cuid())
    boardId      Int     @map(name: "board_list_task_board_id_fk")
    listId       Int     @map(name: "board_list_task_list_id_fk")
    taskId       Int     @map(name: "board_list_task_task_id_fk")
    title        String  @db.VarChar(255)
    descriptions String?
}
